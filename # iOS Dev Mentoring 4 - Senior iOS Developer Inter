# iOS Dev Mentoring 4 - Senior iOS Developer Interview

1 - Asking some questions to know person better
	- Tell something about yourself and experience
	- What kind of projects do you like to work with?
	- What's the iOS project you're most proud of?

2 - Going through a TDD pairing exercise
	Write a program using TDD that prints the numbers from 1 to 100.

	For multiples of three, print "Fizz" instead of the number.
	For multiples of five, print "Buzz".
	For numbers which are multiples of both three and five print "FizzBuzz".

	Sample output:

	1
	2
	Fizz
	4
	Buzz
	Fizz
	7
	8
	Fizz
	Buzz
	11
	Fizz
	13
	14
	FizzBuzz
	16
	17
	Fizz
	19
	Buzz
	... etc up to 100

3 - Ask some techinical questions
	- What does code clean mean to you?
		A: A code that is reusable, maintanable, extendable, testable. Should be easy to change, refactor, mainntain. Understandable.

	- How do you test your code / apps?
		A: For now I've written some Unit and UI Tests, but my current company does not have an automated test culture very solid. So in parallel with that I use to run and test manually on devices too. But I am working to implement TDD, and write a very modular and testable application.

	- How you design/architect your iOS apps?
		A: Currently I am working at create several modules so that all of then together construct the application. And I am used to work with MVVM design pattern for the UI architecture for the application. I am working in parallel on personal projects to decouple the business logic from the application so the UI does not depends on any logic, just UI things. I have also a personal project that is a IMDB list that is built in one project using MVVM and another using VIPER, to compare those UI architectures.

	- Can you describe to us some commonly used design patterns in iOS?
		A: 	1. Delegate, which is a design pattern used to create a communication between objects.
			2. Singleton, which is a class who has a global and unique shared instance.
			3. Factory, which is a object constructor used to 
			4. Open-closed principle, which states that a class should be open for extension but closed for modification.
			5. MVC that is a architure used to compose de application
			6. MVVM
			7. Liskov substitution principle, objects should be replaceble with instances of their sub-types, without changing the behavior.
			8. Interface Segregation Principle, that states the break of thins into protocols, many client-specific interfaces are better than one general-purpose interface.
			9. Dependency inversion, a high level module should not depends on low level modules, both of them should depends on abstractions.
			10. Single Responsability Principle, a class should have only only responsability.
			11.  

		B: 	- MVVM, MVC, VIPER (UI)
			- Delegate, Notification, Singleton, KVC/KVO Observer patterns, Chain of Responsability (UIResponder), Facade, Builder (URLComponents)

	- Whats the difference between Array, Set and Dictionary in Swift?
		A:  - Array is ordered and accepts duplicates.
			- Set is unordered but does not accepts duplicates.
			- Dictionary is not ordered and also does not accept duplicates.

		B:	- Array: ordered collection of items (based on indexing)
			- Set: unordered collection of unique items (based on hashing)
			- Dictionary: unordered collection of key-value items (key based on hashing)
			- NSArray is immutable and NSMutableArray is mutable: NSArray is a class and Array is a struct

	- Whats the main differences between a value type and a reference type in Swift?
		A: 	A value type (structs) are passed by values, if you assign it, you are making a copy of the object. 
			A reference type (classes) are passed by references, if you assign it, you are passing its reference, so you will have the same instance.
			You cannot inherit from a struct, but can for a class.
			Class accepts multiple inits, struct only one, and its not required to create an init.
			Reference types are mutable, while value types are immutable.

		B: 	Values type are often stored in the stack, static memory allocation. Reference types are often allocated in the heap, so they have dynamic allocation. Read about.

		New: Value types are thread safe!

	- How do you setup a Core Data stack?
		A:	First I add the Data model file, then I create the models inside it and export if I need to, to have custom method os init. 

		B:

	- How do you apply Dependency Injection (DI)?
		A:	By adding a dependency only at the initializer from the classes, and trying to use only protocols, to respect the Dependency Inversion design pattern. (Constructor injector).

		B:	Constructor injection, composition root, property injection, 

	- What is Continuous Integration or CI?
		A:	Continuous integration is keeping writing code covered by automated tests, so that every merge is backed up from tests.

		B:	Its a practice of continuously merging code at a master branch several times of a day, working in the team of people and merging code often.

	- What is Continuous Deployment or CD?
		A: 	Its a practice to keep deploying continuously.

		B:	Producing software in very short cicles, with a reliable process, software is always in a state that can be deployed. All tests are always passing, always read to ship.

	- Whats the main difference between static and dynamic libraries in iOS?
		A: 	A static lib the compiler has to run the intire project again whenever a change is made, with dynamic libs, only the changed files are rebuilt.

		B:	A static lib is lint at compile time, the lib is lint with the executable at compile time. A dynamic lib is linked at run time, you can replace the lib without compile the intire app.

	- How would you find and fix memory leaks?
		A:	Xcode does have a tool to check the memory graph for your application, where you can your leaking problems. When they have been found, I can use the weak/unowned modifiers to remove the strong references. And check at deinit methods to remove other references from memory.

		B:	By using Unit Tests.

	- What is delegation and how would you use it?
		A:	Delegation is a design pattern for allow communication between objects. I am used to apply it to make communication between objects that have an parental hierarchy, like a viewController and its view, if I need to the view tell the viewController to do something, I can use delegates.

		B:

	- What does the `escaping` keyword do in Swift?
		A:	The escaping keyword is used when you have a function that receives a closure and you want to that closure stay in memory so it can be used after the function is finished. So the closure can be called at different time from the function scope.

		B:	Passing a closure as param to a function and you want to capture it for the sake of memory management.

	- What does the `lazy` keyword do in Swift?
		A:	The lazy modifier is used so an var is only created when it is first accessed, if you never try to access it, it will never be created.

		B:	

	- What is dynamic dispatch:
		A: 	When your program decides which implementation of an function, method it will compile at run time. Like if you have a class that override some method, it will decide if will execute the overrided method or the original. Dynamic dispatch that decides which implementation will be invoked.

		B:	When your program determines which function to invoke at run time not at compile time, like if you have a class and have subclass that override a method. Its dynamic decided at runtime.

	- What is the `final` keyword in Swift and why whould someone use it?
		A:	The final keyword is used to not allow a class to be subclassed. That class would never be inherited.

		B:	

	- What to ask for a company:
		1) 	What does it take to succeed here?
		2) 	What are you looking for in a dev to fill this role?
		3)	What is expected of a dev in this role?
		4)	How often do you ship?
		5)	How important is testing for the team?
		6)	Do you use practicies like TDD and pair programming?
		7)	


# iOS Dev Mentoring #005 SOLID - Principles

S - Single Responsability Principle (SRP)
	- A component should have only one responsability

O - Open-Closed Principle (OCP)
	- Open for extension and Closed for modification.
	- You should be able to modify a behaviour without changing existing code.
	- A system can never be 100% open/closed.

L - Liskov Substitution Principle (LSP)
	- Objects should be replaceable with instances of their subtypes without breaking the system.

I - Interface Segregation Principle (ISP)
	- Clients should depend on methods they do not use

D - Dependency Inversion Principle (DIP)
	- High level modules should not depend on low-level modules. They should both depend on abstractions. 


Busines rules (models, services...)
- - 
Presentation (view models, presenters)  
- - 
UI (views/viewControllers/framework-specific stuff)









Concurrency, persistence, dispatch queue, struct and class

Persistence:
You can achieve persistence at your app by using Core Data, UserDetaults, FileManager, Keychain, URLCache or even by using external libs like Realm, Parse or Firebase.


Dispatch queue é um objeto que gerencia a execuçao de tarefas serialmente ou concorrentemente, fazendo uso de threads main ou background.

A task is something you want to do, a thread is one of the possibles workers that execute that task

1. File
A file is a named location where is stored some information
2. Class
Is a blueprint from which objects are created, that contains methods, properties
3. Object
Is an instance of a class.
4. Constructor
Methods used to create instances.
5. What is the different OOPS principle?
Encapsulation, abstraction, inheritance, polymorphism
6. What is inheritance?
Is a sub-type that gets all properties from its super-type.
7. What is polymorphism?
Ability that an object have to assume different forms.
8. What are instance and class variable?
Instace vars are vars that belongs to a particular instance of a class. Class vars are vars that are shared through all instances of a class.
9. Compare method and constructor?
Method do some function, constructor creates an instance.
10. What is a singleton class?
A class that has a unique, shared and global instance.
11. What are the steps for creating an object?
Declaration, instance.
18. What is the difference between overloading and overriding?
Overload is when there are multiple methods with the same name on a class but with different parameters. Overriding is when two methods have the same name and signature, but one is frmo the super-type and the other from is sub-type.

Stacks:
You can only push, pop or peek

DispatchQueue: Dif between global and main, when use to prevent concurrency, serial and concurrent.
OperationQueue
Reuse Identifier from Table, how reuse cells work





